/* @flow */

<<<<<<< HEAD
import React from 'react';
=======
import * as React from 'react';
>>>>>>> master
import createNavigationContainer from '../createNavigationContainer';
import createNavigator from './createNavigator';
import CardStackTransitioner from '../views/CardStack/CardStackTransitioner';
import StackRouter from '../routers/StackRouter';
import NavigatorTypes from './NavigatorTypes';

import type {
  NavigationRouteConfigMap,
  StackNavigatorConfig,
<<<<<<< HEAD
} from '../TypeDefinition';

=======
  NavigationState,
  NavigationStackScreenOptions,
  NavigationNavigatorProps,
} from '../TypeDefinition';

// A stack navigators props are the intersection between
// the base navigator props (navgiation, screenProps, etc)
// and the view's props
type StackNavigatorProps = NavigationNavigatorProps<
  NavigationStackScreenOptions,
  NavigationState
> &
  React.ElementProps<typeof CardStackTransitioner>;

>>>>>>> master
export default (
  routeConfigMap: NavigationRouteConfigMap,
  stackConfig: StackNavigatorConfig = {}
) => {
  const {
    initialRouteName,
    initialRouteParams,
    paths,
    headerMode,
    mode,
    cardStyle,
    transitionConfig,
    onTransitionStart,
    onTransitionEnd,
    navigationOptions,
  } = stackConfig;

  const stackRouterConfig = {
    initialRouteName,
    initialRouteParams,
    paths,
    navigationOptions,
  };

  const router = StackRouter(routeConfigMap, stackRouterConfig);

  // Create a navigator with CardStackTransitioner as the view
  const navigator = createNavigator(
    router,
    routeConfigMap,
    stackConfig,
    NavigatorTypes.STACK
<<<<<<< HEAD
  )((props: *) => (
=======
  )((props: StackNavigatorProps) => (
>>>>>>> master
    <CardStackTransitioner
      {...props}
      headerMode={headerMode}
      mode={mode}
      cardStyle={cardStyle}
      transitionConfig={transitionConfig}
      onTransitionStart={onTransitionStart}
      onTransitionEnd={onTransitionEnd}
    />
  ));

  return createNavigationContainer(navigator);
};
